------- FILE jetgame.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						;;;;;;;;;;;;;;;;;;
      4  10000 ????						;;; Include required files with VCS register memory mapping and macros
      5  10000 ????						;;;;;;;;;;;;;;;;;;
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE jetgame.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE jetgame.asm
      8  0000 ????
      9  0000 ????						;;;;;;;;;;;;;;;;;;
     10  0000 ????						;;; Declare variables starting from memory address $80
     11  0000 ????						;;;;;;;;;;;;;;;;;;
     12 U0097 ????				      seg.u	Variables
     13 U0080					      org	$80
     14 U0080
     15 U0080		       00	   JetXPos    byte.b		; player0 x-position
     16 U0081		       00	   JetYPos    byte.b		; player0 y-position
     17 U0082		       00	   BomberXPos byte.b		; player1 x-position
     18 U0083		       00	   BomberYPos byte.b		; player1 y-position
     19 U0084		       00	   Score      byte.b		; 2-digit score stored as BCD
     20 U0085		       00	   Timer      byte.b		; 2-digit timer stored as BCD
     21 U0086		       00	   Temp       byte.b		; auxiliary variable to store temp values
     22 U0087		       00 00	   OnesDigitOffset word.w		; lookup table offset for the score Ones digit
     23 U0089		       00 00	   TensDigitOffset word.w		; lookup table offset for the score Tens digit
     24 U008b		       00 00	   JetSpritePtr word.w		; pointer to player0 sprite lookup table
     25 U008d		       00 00	   JetColorPtr word.w		; pointer to player0 color lookup table
     26 U008f		       00 00	   BomberSpritePtr word.w		; pointer to player1 sprite lookup table
     27 U0091		       00 00	   BomberColorPtr word.w		; pointer to player1 color lookup table
     28 U0093		       00	   JetAnimOffset byte.b		; player0 frame offset for sprite animation
     29 U0094		       00	   Random     byte.b		; used to generate random bomber x-position
     30 U0095		       00	   ScoreSprite byte.b		; store the sprite bit pattern for the score
     31 U0096		       00	   TimerSprite byte.b		; store the sprite bit pattern for the timer
     32 U0097
     33 U0097							;;;;;;;;;;;;;;;;;;
     34 U0097							;;; Define constants
     35 U0097							;;;;;;;;;;;;;;;;;;
     36 U0097		       00 09	   JET_HEIGHT =	9	; player0 sprite height (# rows in lookup table)
     37 U0097		       00 09	   BOMBER_HEIGHT =	9	; player1 sprite height (# rows in lookup table)
     38 U0097		       00 05	   DIGITS_HEIGHT =	5	; scoreboard digit height (#rows in lookup table)
     39 U0097
     40 U0097							;;;;;;;;;;;;;;;;;;
     41 U0097							;;; Start the ROM code at memory address $F000
     42 U0097							;;;;;;;;;;;;;;;;;;
     43  10000 ????				       seg	Code
     44  f000					      org	$F000
     45  f000
     46  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     48  f00b
     49  f00b							;;;;;;;;;;;;;;;;;;
     50  f00b							;;; Initialize RAM variables and TIA registers
     51  f00b							;;;;;;;;;;;;;;;;;;
     52  f00b		       a9 44		      lda	#68
     53  f00d		       85 80		      sta	JetXPos	; JetXPos = 60
     54  f00f		       a9 0a		      lda	#10
     55  f011		       85 81		      sta	JetYPos	; JetYPos = 10
     56  f013		       a9 3e		      lda	#62
     57  f015		       85 82		      sta	BomberXPos	; BomberXPos = 54
     58  f017		       a9 53		      lda	#83
     59  f019		       85 83		      sta	BomberYPos	; BomberYPos = 83
     60  f01b		       a9 d4		      lda	#%11010100
     61  f01d		       85 94		      sta	Random	; Random = $D4
     62  f01f		       a9 00		      lda	#0
     63  f021		       85 84		      sta	Score	; Score = 0
     64  f023		       85 85		      sta	Timer	; Timer = 0
     65  f025
     66  f025							;;;;;;;;;;;;;;;;;;
     67  f025							;;; Initialize pointers to the correct lookup table addresses
     68  f025							;;;;;;;;;;;;;;;;;;
     69  f025		       a9 bd		      lda	#<JetSprite
     70  f027		       85 8b		      sta	JetSpritePtr	; lo-byte pointer for jet sprite lookup table
     71  f029		       a9 f2		      lda	#>JetSprite
     72  f02b		       85 8c		      sta	JetSpritePtr+1	; hi-byte pointer for jet sprite lookup table
     73  f02d
     74  f02d		       a9 d8		      lda	#<JetColor
     75  f02f		       85 8d		      sta	JetColorPtr	; lo-byte pointer for jet color lookup table
     76  f031		       a9 f2		      lda	#>JetColor
     77  f033		       85 8e		      sta	JetColorPtr+1	; hi-byte pointer for jet color lookup table
     78  f035
     79  f035		       a9 cf		      lda	#<BomberSprite
     80  f037		       85 8f		      sta	BomberSpritePtr	; lo-byte pointer for enemy sprite lookup table
     81  f039		       a9 f2		      lda	#>BomberSprite
     82  f03b		       85 90		      sta	BomberSpritePtr+1	; hi-byte pointer for enemy sprite lookup table
     83  f03d
     84  f03d		       a9 ea		      lda	#<BomberColor
     85  f03f		       85 91		      sta	BomberColorPtr	; lo-byte pointer for enemy color lookup table
     86  f041		       a9 f2		      lda	#>BomberColor
     87  f043		       85 92		      sta	BomberColorPtr+1	; hi-byte pointer for enemy color lookup table
     88  f045
     89  f045							;;;;;;;;;;;;;;;;;;
     90  f045							;;; Start the main display loop and frame rendering
     91  f045							;;;;;;;;;;;;;;;;;;
     92  f045				   StartFrame
     93  f045
     94  f045							;;;;;;;;;;;;;;;;;;
     95  f045							;;; Display VSYNC and VBLANK
     96  f045							;;;;;;;;;;;;;;;;;;
     97  f045		       a9 02		      lda	#2
     98  f047		       85 01		      sta	VBLANK	; turn on VBLANK
     99  f049		       85 00		      sta	VSYNC	; turn on VSYNC
    100  f04b					      REPEAT	3
    101  f04b		       85 02		      sta	WSYNC	; display 3 recommended lines of VSYNC
    100  f04b					      REPEND
    101  f04d		       85 02		      sta	WSYNC	; display 3 recommended lines of VSYNC
    100  f04d					      REPEND
    101  f04f		       85 02		      sta	WSYNC	; display 3 recommended lines of VSYNC
    102  f051					      REPEND
    103  f051		       a9 00		      lda	#0
    104  f053		       85 00		      sta	VSYNC	; turn off VSYNC
    105  f055					      REPEAT	33
    106  f055		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f055					      REPEND
    106  f057		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f057					      REPEND
    106  f059		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f059					      REPEND
    106  f05b		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f05b					      REPEND
    106  f05d		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f05d					      REPEND
    106  f05f		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f05f					      REPEND
    106  f061		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f061					      REPEND
    106  f063		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f063					      REPEND
    106  f065		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f065					      REPEND
    106  f067		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f067					      REPEND
    106  f069		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f069					      REPEND
    106  f06b		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f06b					      REPEND
    106  f06d		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f06d					      REPEND
    106  f06f		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f06f					      REPEND
    106  f071		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f071					      REPEND
    106  f073		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f073					      REPEND
    106  f075		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f075					      REPEND
    106  f077		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f077					      REPEND
    106  f079		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f079					      REPEND
    106  f07b		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f07b					      REPEND
    106  f07d		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f07d					      REPEND
    106  f07f		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f07f					      REPEND
    106  f081		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f081					      REPEND
    106  f083		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f083					      REPEND
    106  f085		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f085					      REPEND
    106  f087		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f087					      REPEND
    106  f089		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f089					      REPEND
    106  f08b		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f08b					      REPEND
    106  f08d		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f08d					      REPEND
    106  f08f		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f08f					      REPEND
    106  f091		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f091					      REPEND
    106  f093		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f093					      REPEND
    106  f095		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    107  f097					      REPEND
    108  f097
    109  f097							;;;;;;;;;;;;;;;;;;
    110  f097							;;; Calculations and tasks performed in the VBlank
    111  f097							;;;;;;;;;;;;;;;;;;
    112  f097		       a5 80		      lda	JetXPos
    113  f099		       a0 00		      ldy	#0
    114  f09b		       20 15 f2 	      jsr	SetObjectXPos	; set player0 horizontal position
    115  f09e
    116  f09e		       a5 82		      lda	BomberXPos
    117  f0a0		       a0 01		      ldy	#1
    118  f0a2		       20 15 f2 	      jsr	SetObjectXPos	; set player1 horizontal position
    119  f0a5
    120  f0a5		       20 4c f2 	      jsr	CalculateDigitOffset	; calculate scoreboard digits lookup table offset
    121  f0a8
    122  f0a8		       85 02		      sta	WSYNC
    123  f0aa		       85 2a		      sta	HMOVE	; apply the horizontal offsets previously set
    124  f0ac
    125  f0ac		       a9 00		      lda	#0
    126  f0ae		       85 01		      sta	VBLANK	; turn off VBLANK
    127  f0b0
    128  f0b0							;;;;;;;;;;;;;;;;;;
    129  f0b0							;;; Display the scoreboard lines
    130  f0b0							;;;;;;;;;;;;;;;;;;
    131  f0b0		       a9 00		      lda	#0
    132  f0b2		       85 0d		      sta	PF0
    133  f0b4		       85 0e		      sta	PF1
    134  f0b6		       85 0f		      sta	PF2
    135  f0b8		       85 1b		      sta	GRP0
    136  f0ba		       85 1c		      sta	GRP1
    137  f0bc		       85 0a		      sta	CTRLPF
    138  f0be		       85 09		      sta	COLUBK	; reset TIA registers before displaying the score
    139  f0c0
    140  f0c0		       a9 1e		      lda	#$1E
    141  f0c2		       85 08		      sta	COLUPF	; set the scoreboard playfield color as yellow
    142  f0c4
    143  f0c4		       a2 05		      ldx	#DIGITS_HEIGHT	; start X counter with 5 (height of digits)
    144  f0c6
    145  f0c6				   .ScoreDigitLoop
    146  f0c6		       a4 89		      ldy	TensDigitOffset	; get the tens digit offset for the Score
    147  f0c8		       b9 6d f2 	      lda	Digits,Y	; load the bit pattern from lookup table
    148  f0cb		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit
    149  f0cd		       85 95		      sta	ScoreSprite	; save the score tens digit pattern in a variable
    150  f0cf
    151  f0cf		       a4 87		      ldy	OnesDigitOffset	; get the ones digit offset for the Score
    152  f0d1		       b9 6d f2 	      lda	Digits,Y	; load the digit bit pattern from lookup table
    153  f0d4		       29 0f		      and	#$0F	; mask/remove the graphics for the tens digit
    154  f0d6		       05 95		      ora	ScoreSprite	; merge it with the saved tens digit sprite
    155  f0d8		       85 95		      sta	ScoreSprite	; and save it
    156  f0da		       85 02		      sta	WSYNC	; wait for the end of scanline
    157  f0dc		       85 0e		      sta	PF1	; update the playfield to display the Score sprite
    158  f0de
    159  f0de		       a4 8a		      ldy	TensDigitOffset+1	; get the left digit offset for the Timer
    160  f0e0		       b9 6d f2 	      lda	Digits,Y	; load the digit pattern from lookup table
    161  f0e3		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit
    162  f0e5		       85 96		      sta	TimerSprite	; save the timer tens digit pattern in a variable
    163  f0e7
    164  f0e7		       a4 88		      ldy	OnesDigitOffset+1	; get the ones digit offset for the Timer
    165  f0e9		       b9 6d f2 	      lda	Digits,Y	; load digit pattern from the lookup table
    166  f0ec		       29 0f		      and	#$0F	; mask/remove the graphics for the tens digit
    167  f0ee		       05 96		      ora	TimerSprite	; merge with the saved tens digit graphics
    168  f0f0		       85 96		      sta	TimerSprite	; and save it
    169  f0f2
    170  f0f2		       20 6c f2 	      jsr	Sleep12Cycles	; wastes some cycles
    171  f0f5
    172  f0f5		       85 0e		      sta	PF1	; update the playfield for Timer display
    173  f0f7
    174  f0f7		       a4 95		      ldy	ScoreSprite	; preload for the next scanline
    175  f0f9		       85 02		      sta	WSYNC	; wait for next scanline
    176  f0fb
    177  f0fb		       84 0e		      sty	PF1	; update playfield for the score display
    178  f0fd		       e6 89		      inc	TensDigitOffset
    179  f0ff		       e6 8a		      inc	TensDigitOffset+1
    180  f101		       e6 87		      inc	OnesDigitOffset
    181  f103		       e6 88		      inc	OnesDigitOffset+1	; increment all digits for the next line of data
    182  f105
    183  f105		       20 6c f2 	      jsr	Sleep12Cycles	; waste some cycles
    184  f108
    185  f108		       ca		      dex		; X--
    186  f109		       85 0e		      sta	PF1	; update the playfield for the Timer display
    187  f10b		       d0 b9		      bne	.ScoreDigitLoop	; if dex != 0, then branch to ScoreDigitLoop
    188  f10d
    189  f10d		       85 02		      sta	WSYNC
    190  f10f
    191  f10f		       a9 00		      lda	#0
    192  f111		       85 0d		      sta	PF0
    193  f113		       85 0e		      sta	PF1
    194  f115		       85 0f		      sta	PF2
    195  f117		       85 02		      sta	WSYNC
    196  f119		       85 02		      sta	WSYNC
    197  f11b		       85 02		      sta	WSYNC
    198  f11d
    199  f11d							;;;;;;;;;;;;;;;;;;
    200  f11d							;;; Display the 96 visible scanlines of our main game (because of 2 line kernel)
    201  f11d							;;;;;;;;;;;;;;;;;;
    202  f11d				   GameVisibleLine
    203  f11d		       a9 84		      lda	#$84
    204  f11f		       85 09		      sta	COLUBK	; set background/river color to blue
    205  f121		       a9 c2		      lda	#$C2
    206  f123		       85 08		      sta	COLUPF	; set playfield/grass color to green
    207  f125		       a9 01		      lda	#%00000001
    208  f127		       85 0a		      sta	CTRLPF	; enable playfield reflection
    209  f129		       a9 f0		      lda	#$F0
    210  f12b		       85 0d		      sta	PF0	; setting PF0 bit pattern
    211  f12d		       a9 fc		      lda	#$FC
    212  f12f		       85 0e		      sta	PF1	; setting PF1 bit pattern
    213  f131		       a9 00		      lda	#0
    214  f133		       85 0f		      sta	PF2	; setting PF2 bit pattern
    215  f135
    216  f135		       a2 55		      ldx	#85	; X counts the number of remaining scanlines
    217  f137				   .GameLineLoop
    218  f137				   .AreWeInsideJetSprite		; check if should render sprite player0
    219  f137		       8a		      txa		; transfer X to A
    220  f138		       38		      sec		; make sure carry flag is set
    221  f139		       e5 81		      sbc	JetYPos	; subtract sprite Y coordinate
    222  f13b		       c5 09		      cmp	JET_HEIGHT	; are we inside the sprite height bounds?
    223  f13d		       90 02		      bcc	.DrawSpriteP0	; if result < SpriteHeight, call subroutine
    224  f13f		       a9 00		      lda	#0	; else, set lookup index to 0
    225  f141				   .DrawSpriteP0
    226  f141		       18		      clc		; clears carry flag before addition
    227  f142		       65 93		      adc	JetAnimOffset	; jumps to correct sprite frame in memory
    228  f144		       a8		      tay		; load Y so we can work with pointer
    229  f145		       b1 8b		      lda	(JetSpritePtr),Y	; load player bitmap slice of data
    230  f147		       85 02		      sta	WSYNC	; wait for next scanline
    231  f149		       85 1b		      sta	GRP0	; set graphics for player 0
    232  f14b		       b1 8d		      lda	(JetColorPtr),Y	; load player color from lookup table
    233  f14d		       85 06		      sta	COLUP0	; set color for player 0 slice
    234  f14f
    235  f14f				   .AreWeInsideBomberSprite		; check if should render sprite player1
    236  f14f		       8a		      txa		; transfer X to A
    237  f150		       38		      sec		; make sure carry flag is set
    238  f151		       e5 83		      sbc	BomberYPos	; subtract sprite Y coordinate
    239  f153		       c5 09		      cmp	BOMBER_HEIGHT	; are we inside the sprite height bounds?
    240  f155		       90 02		      bcc	.DrawSpriteP1	; if result < SpriteHeight, call subroutine
    241  f157		       a9 00		      lda	#0	; else, set index to 0
    242  f159				   .DrawSpriteP1
    243  f159		       a8		      tay
    244  f15a		       a9 05		      lda	#%00000101
    245  f15c		       85 05		      sta	NUSIZ1	; stretch player1 sprite
    246  f15e		       b1 8f		      lda	(BomberSpritePtr),Y	; load player bitmap slice of data
    247  f160		       85 02		      sta	WSYNC	; wait for next scanline
    248  f162		       85 1c		      sta	GRP1	; set graphics for player 0
    249  f164		       b1 91		      lda	(BomberColorPtr),Y	; load player color from lookup table
    250  f166		       85 07		      sta	COLUP1	; set color for player 0 slice
    251  f168
    252  f168		       ca		      dex		; X--
    253  f169		       d0 cc		      bne	.GameLineLoop	; repeat next main game scanline until finished
    254  f16b
    255  f16b		       a9 00		      lda	#0
    256  f16d		       85 93		      sta	JetAnimOffset	; reset jet animation frame to zero each frame
    257  f16f
    258  f16f		       85 02		      sta	WSYNC	; wait for final scanline
    259  f171
    260  f171							;;;;;;;;;;;;;;;;;;
    261  f171							;;; Display Overscan
    262  f171							;;;;;;;;;;;;;;;;;;
    263  f171		       a9 02		      lda	#2
    264  f173		       85 01		      sta	VBLANK	; turn on VBLANK again
    265  f175					      REPEAT	30
    266  f175		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f175					      REPEND
    266  f177		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f177					      REPEND
    266  f179		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f179					      REPEND
    266  f17b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f17b					      REPEND
    266  f17d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f17d					      REPEND
    266  f17f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f17f					      REPEND
    266  f181		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f181					      REPEND
    266  f183		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f183					      REPEND
    266  f185		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f185					      REPEND
    266  f187		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f187					      REPEND
    266  f189		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f189					      REPEND
    266  f18b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f18b					      REPEND
    266  f18d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f18d					      REPEND
    266  f18f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f18f					      REPEND
    266  f191		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f191					      REPEND
    266  f193		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f193					      REPEND
    266  f195		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f195					      REPEND
    266  f197		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f197					      REPEND
    266  f199		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f199					      REPEND
    266  f19b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f19b					      REPEND
    266  f19d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f19d					      REPEND
    266  f19f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f19f					      REPEND
    266  f1a1		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f1a1					      REPEND
    266  f1a3		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f1a3					      REPEND
    266  f1a5		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f1a5					      REPEND
    266  f1a7		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f1a7					      REPEND
    266  f1a9		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f1a9					      REPEND
    266  f1ab		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f1ab					      REPEND
    266  f1ad		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    265  f1ad					      REPEND
    266  f1af		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    267  f1b1					      REPEND
    268  f1b1		       a9 00		      lda	#0
    269  f1b3		       85 01		      sta	VBLANK	; turn off VBLANK
    270  f1b5
    271  f1b5							;;;;;;;;;;;;;;;;;;
    272  f1b5							;;; Process joystick input for player0
    273  f1b5							;;;;;;;;;;;;;;;;;;
    274  f1b5				   CheckP0Up
    275  f1b5		       a9 10		      lda	#%00010000	; player0 joystick up
    276  f1b7		       2c 80 02 	      bit	SWCHA
    277  f1ba		       d0 06		      bne	CheckP0Down	; if bit pattern doesnt match, bypass Up block
    278  f1bc		       e6 81		      inc	JetYPos
    279  f1be		       a9 00		      lda	#0
    280  f1c0		       85 93		      sta	JetAnimOffset	; reset sprite animation to first frame
    281  f1c2
    282  f1c2				   CheckP0Down
    283  f1c2		       a9 20		      lda	#%00100000	; player0 joystick down
    284  f1c4		       2c 80 02 	      bit	SWCHA
    285  f1c7		       d0 06		      bne	CheckP0Left	; if bit pattern doesnt match, bypass Down block
    286  f1c9		       c6 81		      dec	JetYPos
    287  f1cb		       a9 00		      lda	#0
    288  f1cd		       85 93		      sta	JetAnimOffset	; reset sprite animation to first frame
    289  f1cf
    290  f1cf				   CheckP0Left
    291  f1cf		       a9 40		      lda	#%01000000	; player0 joystick left
    292  f1d1		       2c 80 02 	      bit	SWCHA
    293  f1d4		       d0 06		      bne	CheckP0Right	; if bit pattern doesnt match, bypass Left block
    294  f1d6		       c6 80		      dec	JetXPos
    295  f1d8		       a5 09		      lda	JET_HEIGHT	; 9
    296  f1da		       85 93		      sta	JetAnimOffset	; set animation offset to the second frame
    297  f1dc
    298  f1dc				   CheckP0Right
    299  f1dc		       a9 80		      lda	#%10000000	; player0 joystick right
    300  f1de		       2c 80 02 	      bit	SWCHA
    301  f1e1		       d0 06		      bne	EndInputCheck	; if bit pattern doesnt match, bypass Right block
    302  f1e3		       e6 80		      inc	JetXPos
    303  f1e5		       a5 09		      lda	JET_HEIGHT	; 9
    304  f1e7		       85 93		      sta	JetAnimOffset	; set animation offset to the second frame
    305  f1e9
    306  f1e9				   EndInputCheck		; fallback when no input was performed
    307  f1e9
    308  f1e9							;;;;;;;;;;;;;;;;;;
    309  f1e9							;;; Calculations to update position for next frame
    310  f1e9							;;;;;;;;;;;;;;;;;;
    311  f1e9				   UpdateBomberPosition
    312  f1e9		       a5 83		      lda	BomberYPos
    313  f1eb		       18		      clc
    314  f1ec		       c9 00		      cmp	#0	; compare bomber y-position with 0
    315  f1ee		       30 05		      bmi	.ResetBomberPosition	; if it is < 0, then reset y-position to the top
    316  f1f0		       c6 83		      dec	BomberYPos	; else, decrement enemy y-position for next frame
    317  f1f2		       4c f8 f1 	      jmp	EndPositionUpdate
    318  f1f5				   .ResetBomberPosition
    319  f1f5		       20 2e f2 	      jsr	GetRandomBomberPos	; call subroutine for random bomber positio
    320  f1f8
    321  f1f8				   EndPositionUpdate		; fallback for the position update code
    322  f1f8
    323  f1f8							;;;;;;;;;;;;;;;;;;
    324  f1f8							;;; Check for object collision
    325  f1f8							;;;;;;;;;;;;;;;;;;
    326  f1f8				   CheckCollisionP0P1
    327  f1f8		       a9 80		      lda	#%10000000	; CXPPMM bit 7 detects P0 and P1 collision
    328  f1fa		       24 07		      bit	CXPPMM	; check CXPPMM bit 7 with the above pattern
    329  f1fc		       d0 03		      bne	.CollisionP0P1	; if collision between P0 and P1 happened, branch
    330  f1fe		       4c 04 f2 	      jmp	CheckCollisionP0PF	; else, skip to next check
    331  f201				   .CollisionP0P1
    332  f201		       20 29 f2 	      jsr	GameOver	; call GameOver subroutine
    333  f204
    334  f204				   CheckCollisionP0PF
    335  f204		       a9 80		      lda	#%10000000	; CXP0FB bit 7 detects P0 and PF collision
    336  f206		       24 02		      bit	CXP0FB	; check CXP0FB bit 7 with the above pattern
    337  f208		       d0 03		      bne	.CollisionP0PF	; if collision P0 and PF happened, branch
    338  f20a		       4c 10 f2 	      jmp	EndCollisionCheck	; else, skip to next check
    339  f20d				   .CollisionP0PF
    340  f20d		       20 29 f2 	      jsr	GameOver	; call GameOver subroutine
    341  f210
    342  f210				   EndCollisionCheck		; fallback
    343  f210		       85 2c		      sta	CXCLR	; clear all collision flags before the next frame
    344  f212
    345  f212
    346  f212							;;;;;;;;;;;;;;;;;;
    347  f212							;;; Loop back to start a brand new frame
    348  f212							;;;;;;;;;;;;;;;;;;
    349  f212		       4c 45 f0 	      jmp	StartFrame	; continue to display the next frame
    350  f215
    351  f215							;;;;;;;;;;;;;;;;;;
    352  f215							;;; Subroutine to handle object horizontal position with fine offset
    353  f215							;;;;;;;;;;;;;;;;;;
    354  f215							;;; A is the target x-coordinate position in pixels of our object
    355  f215							;;; Y is the object type (0:player0, 1:player1, 2:missile0, 3:missile1, 4:ball)
    356  f215							;;;;;;;;;;;;;;;;;;
    357  f215				   SetObjectXPos subroutine
    358  f215		       85 02		      sta	WSYNC	; start a fresh new scanline
    359  f217		       38		      sec		; make sure carry-flag is set before subtracion
    360  f218				   .Div15Loop
    361  f218		       e9 0f		      sbc	#15	; subtract 15 from accumulator
    362  f21a		       b0 fc		      bcs	.Div15Loop	; loop until carry-flag is clear
    363  f21c		       49 07		      eor	#7	; handle offset range from -8 to 7
    364  f21e		       0a		      asl
    365  f21f		       0a		      asl
    366  f220		       0a		      asl
    367  f221		       0a		      asl		; four shift lefts to get only the top 4 bits
    368  f222		       99 20 00 	      sta	HMP0,Y	; store the fine offset to the correct HMxx
    369  f225		       99 10 00 	      sta	RESP0,Y	; fix object position in 15-step increment
    370  f228		       60		      rts
    371  f229
    372  f229							;;;;;;;;;;;;;;;;;;
    373  f229							;;; Game Over subroutine
    374  f229							;;;;;;;;;;;;;;;;;;
    375  f229				   GameOver   subroutine
    376  f229		       a9 30		      lda	#$30
    377  f22b		       85 09		      sta	COLUBK
    378  f22d		       60		      rts
    379  f22e
    380  f22e
    381  f22e							;;;;;;;;;;;;;;;;;;
    382  f22e							;;; Subroutine to generate a Linear-Feedback Shift Register random number
    383  f22e							;;;;;;;;;;;;;;;;;;
    384  f22e							;;; Generate a LFSR random number for the X-position of the bomber.
    385  f22e							;;; Divide the random value by 4 to limit the size of the result to match river.
    386  f22e							;;; Add 30 to compensate for the left green playfield
    387  f22e							;;; The routine also sets the Y-position of the bomber to the top of the screen.
    388  f22e							;;;;;;;;;;;;;;;;;;
    389  f22e				   GetRandomBomberPos subroutine
    390  f22e		       a5 94		      lda	Random
    391  f230		       0a		      asl
    392  f231		       45 94		      eor	Random
    393  f233		       0a		      asl
    394  f234		       45 94		      eor	Random
    395  f236		       0a		      asl
    396  f237		       0a		      asl
    397  f238		       45 94		      eor	Random
    398  f23a		       0a		      asl
    399  f23b		       26 94		      rol	Random	; performs a series of shifts and bit operations
    400  f23d
    401  f23d		       4a		      lsr
    402  f23e		       4a		      lsr		; divide the value by 4 with 2 right shifts
    403  f23f		       85 82		      sta	BomberXPos	; save it to the variable BomberXPos
    404  f241		       a9 1e		      lda	#30
    405  f243		       65 82		      adc	BomberXPos	; adds 30 + BomberXPos to compensate for left PF
    406  f245		       85 82		      sta	BomberXPos	; and sets the new value to the bomber x-position
    407  f247
    408  f247		       a9 60		      lda	#96
    409  f249		       85 83		      sta	BomberYPos	; set the y-position to the top of the screen
    410  f24b
    411  f24b		       60		      rts
    412  f24c
    413  f24c							;;;;;;;;;;;;;;;;;;
    414  f24c							;;; Subroutine to handle scoreboard digits to be displayed on the screen
    415  f24c							;;;;;;;;;;;;;;;;;;
    416  f24c							;;; The scoreboard is stored using BCD, so the display shows hex numbers.
    417  f24c							;;; This converts the high and low nibbles of the variable Score and Timer
    418  f24c							;;; into the offsets of digits lookup table so the values can be displayed.
    419  f24c							;;; Each digit has a height of 5 bytes in the lookup table.
    420  f24c							;;;
    421  f24c							;;; For the low nibble we need to multiply by 5
    422  f24c							;;;   - we can use left shifts to perform multiplication by 2
    423  f24c							;;;   - for any number N, the value of N*5 = (N*2*2)+N
    424  f24c							;;;
    425  f24c							;;; For the upper nibble, since its already times 16, we need to divide it
    426  f24c							;;; and then multiply by 5:
    427  f24c							;;;   - we can use right shifts to perform division by 2
    428  f24c							;;;   - for any number N, the value of (N/16)*5 is equal to (N/4)+(N/16)
    429  f24c							;;;;;;;;;;;;;;;;;;
    430  f24c				   CalculateDigitOffset subroutine
    431  f24c		       a2 01		      ldx	#1	; X register is the loop counter
    432  f24e				   .PrepareScoreLoop		; this will loop twice, first X=1, and then X=0
    433  f24e
    434  f24e		       b5 84		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    435  f250		       29 0f		      and	#$0F	; remove the tens digit by masking 4 bits 00001111
    436  f252		       85 86		      sta	Temp	; save the value of A into Temp
    437  f254		       0a		      asl		; shift left (it is now N*2)
    438  f255		       0a		      asl		; shift left (it is now N*4)
    439  f256		       65 86		      adc	Temp	; add the value saved in Temp (+N)
    440  f258		       95 87		      sta	OnesDigitOffset,X	; save A in OnesDigitOffset+1 or OnesDigitOffset
    441  f25a
    442  f25a		       b5 84		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    443  f25c		       29 f0		      and	#$F0	; remove the ones digit by masking 4 bits 11110000
    444  f25e		       4a		      lsr		; shift right (it is now N/2)
    445  f25f		       4a		      lsr		; shift right (it is now N/4)
    446  f260		       85 86		      sta	Temp	; save the value of A into Temp
    447  f262		       4a		      lsr		; shift right (it is now N/8)
    448  f263		       4a		      lsr		; shift right (it is now N/16)
    449  f264		       65 86		      adc	Temp	; add the value saved in Temp (N/16+N/4)
    450  f266		       95 89		      sta	TensDigitOffset,X	; store A in TensDigitOffset+1 or TensDigitOffset
    451  f268
    452  f268		       ca		      dex		; X--
    453  f269		       10 e3		      bpl	.PrepareScoreLoop	; while X >= 0, loop to pass a second time
    454  f26b
    455  f26b		       60		      rts
    456  f26c
    457  f26c							;;;;;;;;;;;;;;;;;;
    458  f26c							;;; Subroutine to waste 12 cycles
    459  f26c							;;;;;;;;;;;;;;;;;;
    460  f26c							;;; jsr takes 6 cycles
    461  f26c							;;; rts takes 6 cycles
    462  f26c							;;;;;;;;;;;;;;;;;;
    463  f26c				   Sleep12Cycles subroutine
    464  f26c		       60		      rts
    465  f26d
    466  f26d							;;;;;;;;;;;;;;;;;;
    467  f26d							;;; Declare ROM lookup tables
    468  f26d							;;;;;;;;;;;;;;;;;;
    469  f26d				   Digits
    470  f26d		       77		      .byte.b	%01110111	; ### ###
    471  f26e		       55		      .byte.b	%01010101	; # # # #
    472  f26f		       55		      .byte.b	%01010101	; # # # #
    473  f270		       55		      .byte.b	%01010101	; # # # #
    474  f271		       77		      .byte.b	%01110111	; ### ###
    475  f272
    476  f272		       11		      .byte.b	%00010001	;   #	 #
    477  f273		       11		      .byte.b	%00010001	;   #	 #
    478  f274		       11		      .byte.b	%00010001	;   #	 #
    479  f275		       11		      .byte.b	%00010001	;   #	 #
    480  f276		       11		      .byte.b	%00010001	;   #	 #
    481  f277
    482  f277		       77		      .byte.b	%01110111	; ### ###
    483  f278		       11		      .byte.b	%00010001	;   #	 #
    484  f279		       77		      .byte.b	%01110111	; ### ###
    485  f27a		       44		      .byte.b	%01000100	; #   #
    486  f27b		       77		      .byte.b	%01110111	; ### ###
    487  f27c
    488  f27c		       77		      .byte.b	%01110111	; ### ###
    489  f27d		       11		      .byte.b	%00010001	;   #	 #
    490  f27e		       33		      .byte.b	%00110011	;  ##	##
    491  f27f		       11		      .byte.b	%00010001	;   #	 #
    492  f280		       77		      .byte.b	%01110111	; ### ###
    493  f281
    494  f281		       55		      .byte.b	%01010101	; # # # #
    495  f282		       55		      .byte.b	%01010101	; # # # #
    496  f283		       77		      .byte.b	%01110111	; ### ###
    497  f284		       11		      .byte.b	%00010001	;   #	 #
    498  f285		       11		      .byte.b	%00010001	;   #	 #
    499  f286
    500  f286		       77		      .byte.b	%01110111	; ### ###
    501  f287		       44		      .byte.b	%01000100	; #   #
    502  f288		       77		      .byte.b	%01110111	; ### ###
    503  f289		       11		      .byte.b	%00010001	;   #	 #
    504  f28a		       77		      .byte.b	%01110111	; ### ###
    505  f28b
    506  f28b		       77		      .byte.b	%01110111	; ### ###
    507  f28c		       44		      .byte.b	%01000100	; #   #
    508  f28d		       77		      .byte.b	%01110111	; ### ###
    509  f28e		       55		      .byte.b	%01010101	; # # # #
    510  f28f		       77		      .byte.b	%01110111	; ### ###
    511  f290
    512  f290		       77		      .byte.b	%01110111	; ### ###
    513  f291		       11		      .byte.b	%00010001	;   #	 #
    514  f292		       11		      .byte.b	%00010001	;   #	 #
    515  f293		       11		      .byte.b	%00010001	;   #	 #
    516  f294		       11		      .byte.b	%00010001	;   #	 #
    517  f295
    518  f295		       77		      .byte.b	%01110111	; ### ###
    519  f296		       55		      .byte.b	%01010101	; # # # #
    520  f297		       77		      .byte.b	%01110111	; ### ###
    521  f298		       55		      .byte.b	%01010101	; # # # #
    522  f299		       77		      .byte.b	%01110111	; ### ###
    523  f29a
    524  f29a		       77		      .byte.b	%01110111	; ### ###
    525  f29b		       55		      .byte.b	%01010101	; # # # #
    526  f29c		       77		      .byte.b	%01110111	; ### ###
    527  f29d		       11		      .byte.b	%00010001	;   #	 #
    528  f29e		       77		      .byte.b	%01110111	; ### ###
    529  f29f
    530  f29f		       22		      .byte.b	%00100010	;  #	#
    531  f2a0		       55		      .byte.b	%01010101	; # # # #
    532  f2a1		       77		      .byte.b	%01110111	; ### ###
    533  f2a2		       55		      .byte.b	%01010101	; # # # #
    534  f2a3		       55		      .byte.b	%01010101	; # # # #
    535  f2a4
    536  f2a4		       77		      .byte.b	%01110111	; ### ###
    537  f2a5		       55		      .byte.b	%01010101	; # # # #
    538  f2a6		       66		      .byte.b	%01100110	; ##  ##
    539  f2a7		       55		      .byte.b	%01010101	; # # # #
    540  f2a8		       77		      .byte.b	%01110111	; ### ###
    541  f2a9
    542  f2a9		       77		      .byte.b	%01110111	; ### ###
    543  f2aa		       44		      .byte.b	%01000100	; #   #
    544  f2ab		       44		      .byte.b	%01000100	; #   #
    545  f2ac		       44		      .byte.b	%01000100	; #   #
    546  f2ad		       77		      .byte.b	%01110111	; ### ###
    547  f2ae
    548  f2ae		       66		      .byte.b	%01100110	; ##  ##
    549  f2af		       55		      .byte.b	%01010101	; # # # #
    550  f2b0		       55		      .byte.b	%01010101	; # # # #
    551  f2b1		       55		      .byte.b	%01010101	; # # # #
    552  f2b2		       66		      .byte.b	%01100110	; ##  ##
    553  f2b3
    554  f2b3		       77		      .byte.b	%01110111	; ### ###
    555  f2b4		       44		      .byte.b	%01000100	; #   #
    556  f2b5		       77		      .byte.b	%01110111	; ### ###
    557  f2b6		       44		      .byte.b	%01000100	; #   #
    558  f2b7		       77		      .byte.b	%01110111	; ### ###
    559  f2b8
    560  f2b8		       77		      .byte.b	%01110111	; ### ###
    561  f2b9		       44		      .byte.b	%01000100	; #   #
    562  f2ba		       66		      .byte.b	%01100110	; ##  ##
    563  f2bb		       44		      .byte.b	%01000100	; #   #
    564  f2bc		       44		      .byte.b	%01000100	; #   #
    565  f2bd
    566  f2bd				   JetSprite
    567  f2bd		       00		      .byte.b	#%00000000	;
    568  f2be		       14		      .byte.b	#%00010100	;   # #
    569  f2bf		       7f		      .byte.b	#%01111111	; #######
    570  f2c0		       3e		      .byte.b	#%00111110	;  #####
    571  f2c1		       1c		      .byte.b	#%00011100	;   ###
    572  f2c2		       1c		      .byte.b	#%00011100	;   ###
    573  f2c3		       08		      .byte.b	#%00001000	;    #
    574  f2c4		       08		      .byte.b	#%00001000	;    #
    575  f2c5		       08		      .byte.b	#%00001000	;    #
    576  f2c6
    577  f2c6				   JetSpriteTurn
    578  f2c6		       00		      .byte.b	#%00000000	;
    579  f2c7		       08		      .byte.b	#%00001000	;    #
    580  f2c8		       3e		      .byte.b	#%00111110	;  #####
    581  f2c9		       1c		      .byte.b	#%00011100	;   ###
    582  f2ca		       1c		      .byte.b	#%00011100	;   ###
    583  f2cb		       1c		      .byte.b	#%00011100	;   ###
    584  f2cc		       08		      .byte.b	#%00001000	;    #
    585  f2cd		       08		      .byte.b	#%00001000	;    #
    586  f2ce		       08		      .byte.b	#%00001000	;    #
    587  f2cf
    588  f2cf				   BomberSprite
    589  f2cf		       00		      .byte.b	#%00000000	;
    590  f2d0		       08		      .byte.b	#%00001000	;    #
    591  f2d1		       08		      .byte.b	#%00001000	;    #
    592  f2d2		       2a		      .byte.b	#%00101010	;  # # #
    593  f2d3		       3e		      .byte.b	#%00111110	;  #####
    594  f2d4		       7f		      .byte.b	#%01111111	; #######
    595  f2d5		       2a		      .byte.b	#%00101010	;  # # #
    596  f2d6		       08		      .byte.b	#%00001000	;    #
    597  f2d7		       1c		      .byte.b	#%00011100	;   ###
    598  f2d8
    599  f2d8				   JetColor
    600  f2d8		       00		      .byte.b	#$00
    601  f2d9		       fe		      .byte.b	#$FE
    602  f2da		       0c		      .byte.b	#$0C
    603  f2db		       0e		      .byte.b	#$0E
    604  f2dc		       0e		      .byte.b	#$0E
    605  f2dd		       04		      .byte.b	#$04
    606  f2de		       ba		      .byte.b	#$BA
    607  f2df		       0e		      .byte.b	#$0E
    608  f2e0		       08		      .byte.b	#$08
    609  f2e1
    610  f2e1				   JetColorTurn
    611  f2e1		       00		      .byte.b	#$00
    612  f2e2		       fe		      .byte.b	#$FE
    613  f2e3		       0c		      .byte.b	#$0C
    614  f2e4		       0e		      .byte.b	#$0E
    615  f2e5		       0e		      .byte.b	#$0E
    616  f2e6		       04		      .byte.b	#$04
    617  f2e7		       0e		      .byte.b	#$0E
    618  f2e8		       0e		      .byte.b	#$0E
    619  f2e9		       08		      .byte.b	#$08
    620  f2ea
    621  f2ea				   BomberColor
    622  f2ea		       00		      .byte.b	#$00
    623  f2eb		       32		      .byte.b	#$32
    624  f2ec		       32		      .byte.b	#$32
    625  f2ed		       0e		      .byte.b	#$0E
    626  f2ee		       40		      .byte.b	#$40
    627  f2ef		       40		      .byte.b	#$40
    628  f2f0		       40		      .byte.b	#$40
    629  f2f1		       40		      .byte.b	#$40
    630  f2f2		       40		      .byte.b	#$40
    631  f2f3
    632  f2f3
    633  f2f3							;;;;;;;;;;;;;;;;;;
    634  f2f3							;;; Complete ROM size with exactly 4KB
    635  f2f3							;;;;;;;;;;;;;;;;;;
    636  fffc					      org	$FFFC	; move to position $FFFC
    637  fffc		       00 f0		      word.w	Reset	; write 2 bytes with the program reset address
    638  fffe		       00 f0		      word.w	Reset	; write 2 bytes with the interruption vector
