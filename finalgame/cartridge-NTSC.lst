------- FILE jetgame.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						;;;;;;;;;;;;;;;;;;
      4  10000 ????						;;; Include required files with VCS register memory mapping and macros
      5  10000 ????						;;;;;;;;;;;;;;;;;;
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE jetgame.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE jetgame.asm
      8  0000 ????
      9  0000 ????						;;;;;;;;;;;;;;;;;;
     10  0000 ????						;;; Declare variables starting from memory address $80
     11  0000 ????						;;;;;;;;;;;;;;;;;;
     12 U0097 ????				      seg.u	Variables
     13 U0080					      org	$80
     14 U0080
     15 U0080		       00	   JetXPos    byte.b		; player0 x-position
     16 U0081		       00	   JetYPos    byte.b		; player0 y-position
     17 U0082		       00	   BomberXPos byte.b		; player1 x-position
     18 U0083		       00	   BomberYPos byte.b		; player1 y-position
     19 U0084		       00	   Score      byte.b		; 2-digit score stored as BCD
     20 U0085		       00	   Timer      byte.b		; 2-digit timer stored as BCD
     21 U0086		       00	   Temp       byte.b		; auxiliary variable to store temp values
     22 U0087		       00 00	   OnesDigitOffset word.w		; lookup table offset for the score Ones digit
     23 U0089		       00 00	   TensDigitOffset word.w		; lookup table offset for the score Tens digit
     24 U008b		       00 00	   JetSpritePtr word.w		; pointer to player0 sprite lookup table
     25 U008d		       00 00	   JetColorPtr word.w		; pointer to player0 color lookup table
     26 U008f		       00 00	   BomberSpritePtr word.w		; pointer to player1 sprite lookup table
     27 U0091		       00 00	   BomberColorPtr word.w		; pointer to player1 color lookup table
     28 U0093		       00	   JetAnimOffset byte.b		; player0 frame offset for sprite animation
     29 U0094		       00	   Random     byte.b		; used to generate random bomber x-position
     30 U0095		       00	   ScoreSprite byte.b		; store the sprite bit pattern for the score
     31 U0096		       00	   TimerSprite byte.b		; store the sprite bit pattern for the timer
     32 U0097
     33 U0097							;;;;;;;;;;;;;;;;;;
     34 U0097							;;; Define constants
     35 U0097							;;;;;;;;;;;;;;;;;;
     36 U0097		       00 09	   JET_HEIGHT =	9	; player0 sprite height (# rows in lookup table)
     37 U0097		       00 09	   BOMBER_HEIGHT =	9	; player1 sprite height (# rows in lookup table)
     38 U0097		       00 05	   DIGITS_HEIGHT =	5	; scoreboard digit height (#rows in lookup table)
     39 U0097
     40 U0097							;;;;;;;;;;;;;;;;;;
     41 U0097							;;; Start the ROM code at memory address $F000
     42 U0097							;;;;;;;;;;;;;;;;;;
     43  10000 ????				       seg	Code
     44  f000					      org	$F000
     45  f000
     46  f000				   Reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     48  f00b
     49  f00b							;;;;;;;;;;;;;;;;;;
     50  f00b							;;; Initialize RAM variables and TIA registers
     51  f00b							;;;;;;;;;;;;;;;;;;
     52  f00b		       a9 44		      lda	#68
     53  f00d		       85 80		      sta	JetXPos	; JetXPos = 60
     54  f00f		       a9 0a		      lda	#10
     55  f011		       85 81		      sta	JetYPos	; JetYPos = 10
     56  f013		       a9 3e		      lda	#62
     57  f015		       85 82		      sta	BomberXPos	; BomberXPos = 54
     58  f017		       a9 53		      lda	#83
     59  f019		       85 83		      sta	BomberYPos	; BomberYPos = 83
     60  f01b		       a9 d4		      lda	#%11010100
     61  f01d		       85 94		      sta	Random	; Random = $D4
     62  f01f		       a9 00		      lda	#0
     63  f021		       85 84		      sta	Score	; Score = 0
     64  f023		       85 85		      sta	Timer	; Timer = 0
     65  f025
     66  f025							;;;;;;;;;;;;;;;;;;
     67  f025							;;; Initialize pointers to the correct lookup table addresses
     68  f025							;;;;;;;;;;;;;;;;;;
     69  f025		       a9 a7		      lda	#<JetSprite
     70  f027		       85 8b		      sta	JetSpritePtr	; lo-byte pointer for jet sprite lookup table
     71  f029		       a9 f2		      lda	#>JetSprite
     72  f02b		       85 8c		      sta	JetSpritePtr+1	; hi-byte pointer for jet sprite lookup table
     73  f02d
     74  f02d		       a9 c2		      lda	#<JetColor
     75  f02f		       85 8d		      sta	JetColorPtr	; lo-byte pointer for jet color lookup table
     76  f031		       a9 f2		      lda	#>JetColor
     77  f033		       85 8e		      sta	JetColorPtr+1	; hi-byte pointer for jet color lookup table
     78  f035
     79  f035		       a9 b9		      lda	#<BomberSprite
     80  f037		       85 8f		      sta	BomberSpritePtr	; lo-byte pointer for enemy sprite lookup table
     81  f039		       a9 f2		      lda	#>BomberSprite
     82  f03b		       85 90		      sta	BomberSpritePtr+1	; hi-byte pointer for enemy sprite lookup table
     83  f03d
     84  f03d		       a9 d4		      lda	#<BomberColor
     85  f03f		       85 91		      sta	BomberColorPtr	; lo-byte pointer for enemy color lookup table
     86  f041		       a9 f2		      lda	#>BomberColor
     87  f043		       85 92		      sta	BomberColorPtr+1	; hi-byte pointer for enemy color lookup table
     88  f045
     89  f045							;;;;;;;;;;;;;;;;;;
     90  f045							;;; Start the main display loop and frame rendering
     91  f045							;;;;;;;;;;;;;;;;;;
     92  f045				   StartFrame
     93  f045
     94  f045							;;;;;;;;;;;;;;;;;;
     95  f045							;;; Display VSYNC and VBLANK
     96  f045							;;;;;;;;;;;;;;;;;;
     97  f045		       a9 02		      lda	#2
     98  f047		       85 01		      sta	VBLANK	; turn on VBLANK
     99  f049		       85 00		      sta	VSYNC	; turn on VSYNC
    100  f04b					      REPEAT	3
    101  f04b		       85 02		      sta	WSYNC	; display 3 recommended lines of VSYNC
    100  f04b					      REPEND
    101  f04d		       85 02		      sta	WSYNC	; display 3 recommended lines of VSYNC
    100  f04d					      REPEND
    101  f04f		       85 02		      sta	WSYNC	; display 3 recommended lines of VSYNC
    102  f051					      REPEND
    103  f051		       a9 00		      lda	#0
    104  f053		       85 00		      sta	VSYNC	; turn off VSYNC
    105  f055					      REPEAT	33
    106  f055		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f055					      REPEND
    106  f057		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f057					      REPEND
    106  f059		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f059					      REPEND
    106  f05b		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f05b					      REPEND
    106  f05d		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f05d					      REPEND
    106  f05f		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f05f					      REPEND
    106  f061		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f061					      REPEND
    106  f063		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f063					      REPEND
    106  f065		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f065					      REPEND
    106  f067		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f067					      REPEND
    106  f069		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f069					      REPEND
    106  f06b		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f06b					      REPEND
    106  f06d		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f06d					      REPEND
    106  f06f		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f06f					      REPEND
    106  f071		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f071					      REPEND
    106  f073		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f073					      REPEND
    106  f075		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f075					      REPEND
    106  f077		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f077					      REPEND
    106  f079		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f079					      REPEND
    106  f07b		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f07b					      REPEND
    106  f07d		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f07d					      REPEND
    106  f07f		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f07f					      REPEND
    106  f081		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f081					      REPEND
    106  f083		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f083					      REPEND
    106  f085		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f085					      REPEND
    106  f087		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f087					      REPEND
    106  f089		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f089					      REPEND
    106  f08b		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f08b					      REPEND
    106  f08d		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f08d					      REPEND
    106  f08f		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f08f					      REPEND
    106  f091		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f091					      REPEND
    106  f093		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    105  f093					      REPEND
    106  f095		       85 02		      sta	WSYNC	; display the recommended lines of VBLANK
    107  f097					      REPEND
    108  f097
    109  f097							;;;;;;;;;;;;;;;;;;
    110  f097							;;; Calculations and tasks performed in the VBlank
    111  f097							;;;;;;;;;;;;;;;;;;
    112  f097		       a5 80		      lda	JetXPos
    113  f099		       a0 00		      ldy	#0
    114  f09b		       20 ff f1 	      jsr	SetObjectXPos	; set player0 horizontal position
    115  f09e
    116  f09e		       a5 82		      lda	BomberXPos
    117  f0a0		       a0 01		      ldy	#1
    118  f0a2		       20 ff f1 	      jsr	SetObjectXPos	; set player1 horizontal position
    119  f0a5
    120  f0a5		       20 36 f2 	      jsr	CalculateDigitOffset	; calculate scoreboard digits lookup table offset
    121  f0a8
    122  f0a8		       85 02		      sta	WSYNC
    123  f0aa		       85 2a		      sta	HMOVE	; apply the horizontal offsets previously set
    124  f0ac
    125  f0ac		       a9 00		      lda	#0
    126  f0ae		       85 01		      sta	VBLANK	; turn off VBLANK
    127  f0b0
    128  f0b0							;;;;;;;;;;;;;;;;;;
    129  f0b0							;;; Display the scoreboard lines
    130  f0b0							;;;;;;;;;;;;;;;;;;
    131  f0b0		       a9 00		      lda	#0
    132  f0b2		       85 0d		      sta	PF0
    133  f0b4		       85 0e		      sta	PF1
    134  f0b6		       85 0f		      sta	PF2
    135  f0b8		       85 1b		      sta	GRP0
    136  f0ba		       85 1c		      sta	GRP1	; reset TIA registers before displaying the score
    137  f0bc
    138  f0bc		       a2 05		      ldx	#DIGITS_HEIGHT	; start X counter with 5 (height of digits)
    139  f0be
    140  f0be				   .ScoreDigitLoop
    141  f0be		       a4 89		      ldy	TensDigitOffset	; get the tens digit offset for the Score
    142  f0c0		       b9 57 f2 	      lda	Digits,Y	; load the bit pattern from lookup table
    143  f0c3		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit
    144  f0c5		       85 95		      sta	ScoreSprite	; save the score tens digit pattern in a variable
    145  f0c7
    146  f0c7		       a4 87		      ldy	OnesDigitOffset	; get the ones digit offset for the Score
    147  f0c9		       b9 57 f2 	      lda	Digits,Y	; load the digit bit pattern from lookup table
    148  f0cc		       29 0f		      and	#$0F	; mask/remove the graphics for the tens digit
    149  f0ce		       05 95		      ora	ScoreSprite	; merge it with the saved tens digit sprite
    150  f0d0		       85 95		      sta	ScoreSprite	; and save it
    151  f0d2		       85 02		      sta	WSYNC	; wait for the end of scanline
    152  f0d4		       85 0e		      sta	PF1	; update the playfield to display the Score sprite
    153  f0d6
    154  f0d6		       a4 8a		      ldy	TensDigitOffset+1	; get the left digit offset for the Timer
    155  f0d8		       b9 57 f2 	      lda	Digits,Y	; load the digit pattern from lookup table
    156  f0db		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit
    157  f0dd		       85 96		      sta	TimerSprite	; save the timer tens digit pattern in a variable
    158  f0df
    159  f0df		       a4 88		      ldy	OnesDigitOffset+1	; get the ones digit offset for the Timer
    160  f0e1		       b9 57 f2 	      lda	Digits,Y	; load digit pattern from the lookup table
    161  f0e4		       29 0f		      and	#$0F	; mask/remove the graphics for the tens digit
    162  f0e6		       05 96		      ora	TimerSprite	; merge with the saved tens digit graphics
    163  f0e8		       85 96		      sta	TimerSprite	; and save it
    164  f0ea
    165  f0ea		       20 56 f2 	      jsr	Sleep12Cycles	; wastes some cycles
    166  f0ed
    167  f0ed		       85 0e		      sta	PF1	; update the playfield for Timer display
    168  f0ef
    169  f0ef		       a4 95		      ldy	ScoreSprite	; preload for the next scanline
    170  f0f1		       85 02		      sta	WSYNC	; wait for next scanline
    171  f0f3
    172  f0f3		       84 0e		      sty	PF1	; update playfield for the score display
    173  f0f5		       e6 89		      inc	TensDigitOffset
    174  f0f7		       e6 8a		      inc	TensDigitOffset+1
    175  f0f9		       e6 87		      inc	OnesDigitOffset
    176  f0fb		       e6 88		      inc	OnesDigitOffset+1	; increment all digits for the next line of data
    177  f0fd
    178  f0fd		       20 56 f2 	      jsr	Sleep12Cycles	; waste some cycles
    179  f100
    180  f100		       ca		      dex		; X--
    181  f101		       85 0e		      sta	PF1	; update the playfield for the Timer display
    182  f103		       d0 b9		      bne	.ScoreDigitLoop	; if dex != 0, then branch to ScoreDigitLoop
    183  f105
    184  f105		       85 02		      sta	WSYNC
    185  f107
    186  f107							;;;;;;;;;;;;;;;;;;
    187  f107							;;; Display the 96 visible scanlines of our main game (because of 2 line kernel)
    188  f107							;;;;;;;;;;;;;;;;;;
    189  f107				   GameVisibleLine
    190  f107		       a9 84		      lda	#$84
    191  f109		       85 09		      sta	COLUBK	; set background/river color to blue
    192  f10b		       a9 c2		      lda	#$C2
    193  f10d		       85 08		      sta	COLUPF	; set playfield/grass color to green
    194  f10f		       a9 01		      lda	#%00000001
    195  f111		       85 0a		      sta	CTRLPF	; enable playfield reflection
    196  f113		       a9 f0		      lda	#$F0
    197  f115		       85 0d		      sta	PF0	; setting PF0 bit pattern
    198  f117		       a9 fc		      lda	#$FC
    199  f119		       85 0e		      sta	PF1	; setting PF1 bit pattern
    200  f11b		       a9 00		      lda	#0
    201  f11d		       85 0f		      sta	PF2	; setting PF2 bit pattern
    202  f11f
    203  f11f		       a2 54		      ldx	#84	; X counts the number of remaining scanlines
    204  f121				   .GameLineLoop
    205  f121				   .AreWeInsideJetSprite		; check if should render sprite player0
    206  f121		       8a		      txa		; transfer X to A
    207  f122		       38		      sec		; make sure carry flag is set
    208  f123		       e5 81		      sbc	JetYPos	; subtract sprite Y coordinate
    209  f125		       c5 09		      cmp	JET_HEIGHT	; are we inside the sprite height bounds?
    210  f127		       90 02		      bcc	.DrawSpriteP0	; if result < SpriteHeight, call subroutine
    211  f129		       a9 00		      lda	#0	; else, set lookup index to 0
    212  f12b				   .DrawSpriteP0
    213  f12b		       18		      clc		; clears carry flag before addition
    214  f12c		       65 93		      adc	JetAnimOffset	; jumps to correct sprite frame in memory
    215  f12e		       a8		      tay		; load Y so we can work with pointer
    216  f12f		       b1 8b		      lda	(JetSpritePtr),Y	; load player bitmap slice of data
    217  f131		       85 02		      sta	WSYNC	; wait for next scanline
    218  f133		       85 1b		      sta	GRP0	; set graphics for player 0
    219  f135		       b1 8d		      lda	(JetColorPtr),Y	; load player color from lookup table
    220  f137		       85 06		      sta	COLUP0	; set color for player 0 slice
    221  f139
    222  f139				   .AreWeInsideBomberSprite		; check if should render sprite player1
    223  f139		       8a		      txa		; transfer X to A
    224  f13a		       38		      sec		; make sure carry flag is set
    225  f13b		       e5 83		      sbc	BomberYPos	; subtract sprite Y coordinate
    226  f13d		       c5 09		      cmp	BOMBER_HEIGHT	; are we inside the sprite height bounds?
    227  f13f		       90 02		      bcc	.DrawSpriteP1	; if result < SpriteHeight, call subroutine
    228  f141		       a9 00		      lda	#0	; else, set index to 0
    229  f143				   .DrawSpriteP1
    230  f143		       a8		      tay
    231  f144		       a9 05		      lda	#%0000101
    232  f146		       85 05		      sta	NUSIZ1	; stretch player1 sprite
    233  f148		       b1 8f		      lda	(BomberSpritePtr),Y	; load player bitmap slice of data
    234  f14a		       85 02		      sta	WSYNC	; wait for next scanline
    235  f14c		       85 1c		      sta	GRP1	; set graphics for player 0
    236  f14e		       b1 91		      lda	(BomberColorPtr),Y	; load player color from lookup table
    237  f150		       85 07		      sta	COLUP1	; set color for player 0 slice
    238  f152
    239  f152		       ca		      dex		; X--
    240  f153		       d0 cc		      bne	.GameLineLoop	; repeat next main game scanline until finished
    241  f155
    242  f155		       a9 00		      lda	#0
    243  f157		       85 93		      sta	JetAnimOffset	; reset jet animation frame to zero each frame
    244  f159
    245  f159		       85 02		      sta	WSYNC	; wait for final scanline
    246  f15b
    247  f15b							;;;;;;;;;;;;;;;;;;
    248  f15b							;;; Display Overscan
    249  f15b							;;;;;;;;;;;;;;;;;;
    250  f15b		       a9 02		      lda	#2
    251  f15d		       85 01		      sta	VBLANK	; turn on VBLANK again
    252  f15f					      REPEAT	30
    253  f15f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f15f					      REPEND
    253  f161		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f161					      REPEND
    253  f163		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f163					      REPEND
    253  f165		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f165					      REPEND
    253  f167		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f167					      REPEND
    253  f169		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f169					      REPEND
    253  f16b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f16b					      REPEND
    253  f16d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f16d					      REPEND
    253  f16f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f16f					      REPEND
    253  f171		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f171					      REPEND
    253  f173		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f173					      REPEND
    253  f175		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f175					      REPEND
    253  f177		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f177					      REPEND
    253  f179		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f179					      REPEND
    253  f17b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f17b					      REPEND
    253  f17d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f17d					      REPEND
    253  f17f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f17f					      REPEND
    253  f181		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f181					      REPEND
    253  f183		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f183					      REPEND
    253  f185		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f185					      REPEND
    253  f187		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f187					      REPEND
    253  f189		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f189					      REPEND
    253  f18b		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f18b					      REPEND
    253  f18d		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f18d					      REPEND
    253  f18f		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f18f					      REPEND
    253  f191		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f191					      REPEND
    253  f193		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f193					      REPEND
    253  f195		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f195					      REPEND
    253  f197		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    252  f197					      REPEND
    253  f199		       85 02		      sta	WSYNC	; display 30 recommended lines of VBlank Overscan
    254  f19b					      REPEND
    255  f19b		       a9 00		      lda	#0
    256  f19d		       85 01		      sta	VBLANK	; turn off VBLANK
    257  f19f
    258  f19f							;;;;;;;;;;;;;;;;;;
    259  f19f							;;; Process joystick input for player0
    260  f19f							;;;;;;;;;;;;;;;;;;
    261  f19f				   CheckP0Up
    262  f19f		       a9 10		      lda	#%00010000	; player0 joystick up
    263  f1a1		       2c 80 02 	      bit	SWCHA
    264  f1a4		       d0 06		      bne	CheckP0Down	; if bit pattern doesnt match, bypass Up block
    265  f1a6		       e6 81		      inc	JetYPos
    266  f1a8		       a9 00		      lda	#0
    267  f1aa		       85 93		      sta	JetAnimOffset	; reset sprite animation to first frame
    268  f1ac
    269  f1ac				   CheckP0Down
    270  f1ac		       a9 20		      lda	#%00100000	; player0 joystick down
    271  f1ae		       2c 80 02 	      bit	SWCHA
    272  f1b1		       d0 06		      bne	CheckP0Left	; if bit pattern doesnt match, bypass Down block
    273  f1b3		       c6 81		      dec	JetYPos
    274  f1b5		       a9 00		      lda	#0
    275  f1b7		       85 93		      sta	JetAnimOffset	; reset sprite animation to first frame
    276  f1b9
    277  f1b9				   CheckP0Left
    278  f1b9		       a9 40		      lda	#%01000000	; player0 joystick left
    279  f1bb		       2c 80 02 	      bit	SWCHA
    280  f1be		       d0 06		      bne	CheckP0Right	; if bit pattern doesnt match, bypass Left block
    281  f1c0		       c6 80		      dec	JetXPos
    282  f1c2		       a5 09		      lda	JET_HEIGHT	; 9
    283  f1c4		       85 93		      sta	JetAnimOffset	; set animation offset to the second frame
    284  f1c6
    285  f1c6				   CheckP0Right
    286  f1c6		       a9 80		      lda	#%10000000	; player0 joystick right
    287  f1c8		       2c 80 02 	      bit	SWCHA
    288  f1cb		       d0 06		      bne	EndInputCheck	; if bit pattern doesnt match, bypass Right block
    289  f1cd		       e6 80		      inc	JetXPos
    290  f1cf		       a5 09		      lda	JET_HEIGHT	; 9
    291  f1d1		       85 93		      sta	JetAnimOffset	; set animation offset to the second frame
    292  f1d3
    293  f1d3				   EndInputCheck		; fallback when no input was performed
    294  f1d3
    295  f1d3							;;;;;;;;;;;;;;;;;;
    296  f1d3							;;; Calculations to update position for next frame
    297  f1d3							;;;;;;;;;;;;;;;;;;
    298  f1d3				   UpdateBomberPosition
    299  f1d3		       a5 83		      lda	BomberYPos
    300  f1d5		       18		      clc
    301  f1d6		       c9 00		      cmp	#0	; compare bomber y-position with 0
    302  f1d8		       30 05		      bmi	.ResetBomberPosition	; if it is < 0, then reset y-position to the top
    303  f1da		       c6 83		      dec	BomberYPos	; else, decrement enemy y-position for next frame
    304  f1dc		       4c e2 f1 	      jmp	EndPositionUpdate
    305  f1df				   .ResetBomberPosition
    306  f1df		       20 18 f2 	      jsr	GetRandomBomberPos	; call subroutine for random bomber positio
    307  f1e2
    308  f1e2				   EndPositionUpdate		; fallback for the position update code
    309  f1e2
    310  f1e2							;;;;;;;;;;;;;;;;;;
    311  f1e2							;;; Check for object collision
    312  f1e2							;;;;;;;;;;;;;;;;;;
    313  f1e2				   CheckCollisionP0P1
    314  f1e2		       a9 80		      lda	#%10000000	; CXPPMM bit 7 detects P0 and P1 collision
    315  f1e4		       24 07		      bit	CXPPMM	; check CXPPMM bit 7 with the above pattern
    316  f1e6		       d0 03		      bne	.CollisionP0P1	; if collision between P0 and P1 happened, branch
    317  f1e8		       4c ee f1 	      jmp	CheckCollisionP0PF	; else, skip to next check
    318  f1eb				   .CollisionP0P1
    319  f1eb		       20 13 f2 	      jsr	GameOver	; call GameOver subroutine
    320  f1ee
    321  f1ee				   CheckCollisionP0PF
    322  f1ee		       a9 80		      lda	#%10000000	; CXP0FB bit 7 detects P0 and PF collision
    323  f1f0		       24 02		      bit	CXP0FB	; check CXP0FB bit 7 with the above pattern
    324  f1f2		       d0 03		      bne	.CollisionP0PF	; if collision P0 and PF happened, branch
    325  f1f4		       4c fa f1 	      jmp	EndCollisionCheck	; else, skip to next check
    326  f1f7				   .CollisionP0PF
    327  f1f7		       20 13 f2 	      jsr	GameOver	; call GameOver subroutine
    328  f1fa
    329  f1fa				   EndCollisionCheck		; fallback
    330  f1fa		       85 2c		      sta	CXCLR	; clear all collision flags before the next frame
    331  f1fc
    332  f1fc
    333  f1fc							;;;;;;;;;;;;;;;;;;
    334  f1fc							;;; Loop back to start a brand new frame
    335  f1fc							;;;;;;;;;;;;;;;;;;
    336  f1fc		       4c 45 f0 	      jmp	StartFrame	; continue to display the next frame
    337  f1ff
    338  f1ff							;;;;;;;;;;;;;;;;;;
    339  f1ff							;;; Subroutine to handle object horizontal position with fine offset
    340  f1ff							;;;;;;;;;;;;;;;;;;
    341  f1ff							;;; A is the target x-coordinate position in pixels of our object
    342  f1ff							;;; Y is the object type (0:player0, 1:player1, 2:missile0, 3:missile1, 4:ball)
    343  f1ff							;;;;;;;;;;;;;;;;;;
    344  f1ff				   SetObjectXPos subroutine
    345  f1ff		       85 02		      sta	WSYNC	; start a fresh new scanline
    346  f201		       38		      sec		; make sure carry-flag is set before subtracion
    347  f202				   .Div15Loop
    348  f202		       e9 0f		      sbc	#15	; subtract 15 from accumulator
    349  f204		       b0 fc		      bcs	.Div15Loop	; loop until carry-flag is clear
    350  f206		       49 07		      eor	#7	; handle offset range from -8 to 7
    351  f208		       0a		      asl
    352  f209		       0a		      asl
    353  f20a		       0a		      asl
    354  f20b		       0a		      asl		; four shift lefts to get only the top 4 bits
    355  f20c		       99 20 00 	      sta	HMP0,Y	; store the fine offset to the correct HMxx
    356  f20f		       99 10 00 	      sta	RESP0,Y	; fix object position in 15-step increment
    357  f212		       60		      rts
    358  f213
    359  f213							;;;;;;;;;;;;;;;;;;
    360  f213							;;; Game Over subroutine
    361  f213							;;;;;;;;;;;;;;;;;;
    362  f213				   GameOver   subroutine
    363  f213		       a9 30		      lda	#$30
    364  f215		       85 09		      sta	COLUBK
    365  f217		       60		      rts
    366  f218
    367  f218
    368  f218							;;;;;;;;;;;;;;;;;;
    369  f218							;;; Subroutine to generate a Linear-Feedback Shift Register random number
    370  f218							;;;;;;;;;;;;;;;;;;
    371  f218							;;; Generate a LFSR random number for the X-position of the bomber.
    372  f218							;;; Divide the random value by 4 to limit the size of the result to match river.
    373  f218							;;; Add 30 to compensate for the left green playfield
    374  f218							;;; The routine also sets the Y-position of the bomber to the top of the screen.
    375  f218							;;;;;;;;;;;;;;;;;;
    376  f218				   GetRandomBomberPos subroutine
    377  f218		       a5 94		      lda	Random
    378  f21a		       0a		      asl
    379  f21b		       45 94		      eor	Random
    380  f21d		       0a		      asl
    381  f21e		       45 94		      eor	Random
    382  f220		       0a		      asl
    383  f221		       0a		      asl
    384  f222		       45 94		      eor	Random
    385  f224		       0a		      asl
    386  f225		       26 94		      rol	Random	; performs a series of shifts and bit operations
    387  f227
    388  f227		       4a		      lsr
    389  f228		       4a		      lsr		; divide the value by 4 with 2 right shifts
    390  f229		       85 82		      sta	BomberXPos	; save it to the variable BomberXPos
    391  f22b		       a9 1e		      lda	#30
    392  f22d		       65 82		      adc	BomberXPos	; adds 30 + BomberXPos to compensate for left PF
    393  f22f		       85 82		      sta	BomberXPos	; and sets the new value to the bomber x-position
    394  f231
    395  f231		       a9 60		      lda	#96
    396  f233		       85 83		      sta	BomberYPos	; set the y-position to the top of the screen
    397  f235
    398  f235		       60		      rts
    399  f236
    400  f236							;;;;;;;;;;;;;;;;;;
    401  f236							;;; Subroutine to handle scoreboard digits to be displayed on the screen
    402  f236							;;;;;;;;;;;;;;;;;;
    403  f236							;;; The scoreboard is stored using BCD, so the display shows hex numbers.
    404  f236							;;; This converts the high and low nibbles of the variable Score and Timer
    405  f236							;;; into the offsets of digits lookup table so the values can be displayed.
    406  f236							;;; Each digit has a height of 5 bytes in the lookup table.
    407  f236							;;;
    408  f236							;;; For the low nibble we need to multiply by 5
    409  f236							;;;   - we can use left shifts to perform multiplication by 2
    410  f236							;;;   - for any number N, the value of N*5 = (N*2*2)+N
    411  f236							;;;
    412  f236							;;; For the upper nibble, since its already times 16, we need to divide it
    413  f236							;;; and then multiply by 5:
    414  f236							;;;   - we can use right shifts to perform division by 2
    415  f236							;;;   - for any number N, the value of (N/16)*5 is equal to (N/4)+(N/16)
    416  f236							;;;;;;;;;;;;;;;;;;
    417  f236				   CalculateDigitOffset subroutine
    418  f236		       a2 01		      ldx	#1	; X register is the loop counter
    419  f238				   .PrepareScoreLoop		; this will loop twice, first X=1, and then X=0
    420  f238
    421  f238		       b5 84		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    422  f23a		       29 0f		      and	#$0F	; remove the tens digit by masking 4 bits 00001111
    423  f23c		       85 86		      sta	Temp	; save the value of A into Temp
    424  f23e		       0a		      asl		; shift left (it is now N*2)
    425  f23f		       0a		      asl		; shift left (it is now N*4)
    426  f240		       65 86		      adc	Temp	; add the value saved in Temp (+N)
    427  f242		       95 87		      sta	OnesDigitOffset,X	; save A in OnesDigitOffset+1 or OnesDigitOffset
    428  f244
    429  f244		       b5 84		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    430  f246		       29 f0		      and	#$F0	; remove the ones digit by masking 4 bits 11110000
    431  f248		       4a		      lsr		; shift right (it is now N/2)
    432  f249		       4a		      lsr		; shift right (it is now N/4)
    433  f24a		       85 86		      sta	Temp	; save the value of A into Temp
    434  f24c		       4a		      lsr		; shift right (it is now N/8)
    435  f24d		       4a		      lsr		; shift right (it is now N/16)
    436  f24e		       65 86		      adc	Temp	; add the value saved in Temp (N/16+N/4)
    437  f250		       95 89		      sta	TensDigitOffset,X	; store A in TensDigitOffset+1 or TensDigitOffset
    438  f252
    439  f252		       ca		      dex		; X--
    440  f253		       10 e3		      bpl	.PrepareScoreLoop	; while X >= 0, loop to pass a second time
    441  f255
    442  f255		       60		      rts
    443  f256
    444  f256							;;;;;;;;;;;;;;;;;;
    445  f256							;;; Subroutine to waste 12 cycles
    446  f256							;;;;;;;;;;;;;;;;;;
    447  f256							;;; jsr takes 6 cycles
    448  f256							;;; rts takes 6 cycles
    449  f256							;;;;;;;;;;;;;;;;;;
    450  f256				   Sleep12Cycles subroutine
    451  f256		       60		      rts
    452  f257
    453  f257							;;;;;;;;;;;;;;;;;;
    454  f257							;;; Declare ROM lookup tables
    455  f257							;;;;;;;;;;;;;;;;;;
    456  f257				   Digits
    457  f257		       77		      .byte.b	%01110111	; ### ###
    458  f258		       55		      .byte.b	%01010101	; # # # #
    459  f259		       55		      .byte.b	%01010101	; # # # #
    460  f25a		       55		      .byte.b	%01010101	; # # # #
    461  f25b		       77		      .byte.b	%01110111	; ### ###
    462  f25c
    463  f25c		       11		      .byte.b	%00010001	;   #	 #
    464  f25d		       11		      .byte.b	%00010001	;   #	 #
    465  f25e		       11		      .byte.b	%00010001	;   #	 #
    466  f25f		       11		      .byte.b	%00010001	;   #	 #
    467  f260		       11		      .byte.b	%00010001	;   #	 #
    468  f261
    469  f261		       77		      .byte.b	%01110111	; ### ###
    470  f262		       11		      .byte.b	%00010001	;   #	 #
    471  f263		       77		      .byte.b	%01110111	; ### ###
    472  f264		       44		      .byte.b	%01000100	; #   #
    473  f265		       77		      .byte.b	%01110111	; ### ###
    474  f266
    475  f266		       77		      .byte.b	%01110111	; ### ###
    476  f267		       11		      .byte.b	%00010001	;   #	 #
    477  f268		       33		      .byte.b	%00110011	;  ##	##
    478  f269		       11		      .byte.b	%00010001	;   #	 #
    479  f26a		       77		      .byte.b	%01110111	; ### ###
    480  f26b
    481  f26b		       55		      .byte.b	%01010101	; # # # #
    482  f26c		       55		      .byte.b	%01010101	; # # # #
    483  f26d		       77		      .byte.b	%01110111	; ### ###
    484  f26e		       11		      .byte.b	%00010001	;   #	 #
    485  f26f		       11		      .byte.b	%00010001	;   #	 #
    486  f270
    487  f270		       77		      .byte.b	%01110111	; ### ###
    488  f271		       44		      .byte.b	%01000100	; #   #
    489  f272		       77		      .byte.b	%01110111	; ### ###
    490  f273		       11		      .byte.b	%00010001	;   #	 #
    491  f274		       77		      .byte.b	%01110111	; ### ###
    492  f275
    493  f275		       77		      .byte.b	%01110111	; ### ###
    494  f276		       44		      .byte.b	%01000100	; #   #
    495  f277		       77		      .byte.b	%01110111	; ### ###
    496  f278		       55		      .byte.b	%01010101	; # # # #
    497  f279		       77		      .byte.b	%01110111	; ### ###
    498  f27a
    499  f27a		       77		      .byte.b	%01110111	; ### ###
    500  f27b		       11		      .byte.b	%00010001	;   #	 #
    501  f27c		       11		      .byte.b	%00010001	;   #	 #
    502  f27d		       11		      .byte.b	%00010001	;   #	 #
    503  f27e		       11		      .byte.b	%00010001	;   #	 #
    504  f27f
    505  f27f		       77		      .byte.b	%01110111	; ### ###
    506  f280		       55		      .byte.b	%01010101	; # # # #
    507  f281		       77		      .byte.b	%01110111	; ### ###
    508  f282		       55		      .byte.b	%01010101	; # # # #
    509  f283		       77		      .byte.b	%01110111	; ### ###
    510  f284
    511  f284		       77		      .byte.b	%01110111	; ### ###
    512  f285		       55		      .byte.b	%01010101	; # # # #
    513  f286		       77		      .byte.b	%01110111	; ### ###
    514  f287		       11		      .byte.b	%00010001	;   #	 #
    515  f288		       77		      .byte.b	%01110111	; ### ###
    516  f289
    517  f289		       22		      .byte.b	%00100010	;  #	#
    518  f28a		       55		      .byte.b	%01010101	; # # # #
    519  f28b		       77		      .byte.b	%01110111	; ### ###
    520  f28c		       55		      .byte.b	%01010101	; # # # #
    521  f28d		       55		      .byte.b	%01010101	; # # # #
    522  f28e
    523  f28e		       77		      .byte.b	%01110111	; ### ###
    524  f28f		       55		      .byte.b	%01010101	; # # # #
    525  f290		       66		      .byte.b	%01100110	; ##  ##
    526  f291		       55		      .byte.b	%01010101	; # # # #
    527  f292		       77		      .byte.b	%01110111	; ### ###
    528  f293
    529  f293		       77		      .byte.b	%01110111	; ### ###
    530  f294		       44		      .byte.b	%01000100	; #   #
    531  f295		       44		      .byte.b	%01000100	; #   #
    532  f296		       44		      .byte.b	%01000100	; #   #
    533  f297		       77		      .byte.b	%01110111	; ### ###
    534  f298
    535  f298		       66		      .byte.b	%01100110	; ##  ##
    536  f299		       55		      .byte.b	%01010101	; # # # #
    537  f29a		       55		      .byte.b	%01010101	; # # # #
    538  f29b		       55		      .byte.b	%01010101	; # # # #
    539  f29c		       66		      .byte.b	%01100110	; ##  ##
    540  f29d
    541  f29d		       77		      .byte.b	%01110111	; ### ###
    542  f29e		       44		      .byte.b	%01000100	; #   #
    543  f29f		       77		      .byte.b	%01110111	; ### ###
    544  f2a0		       44		      .byte.b	%01000100	; #   #
    545  f2a1		       77		      .byte.b	%01110111	; ### ###
    546  f2a2
    547  f2a2		       77		      .byte.b	%01110111	; ### ###
    548  f2a3		       44		      .byte.b	%01000100	; #   #
    549  f2a4		       66		      .byte.b	%01100110	; ##  ##
    550  f2a5		       44		      .byte.b	%01000100	; #   #
    551  f2a6		       44		      .byte.b	%01000100	; #   #
    552  f2a7
    553  f2a7				   JetSprite
    554  f2a7		       00		      .byte.b	#%00000000	;
    555  f2a8		       14		      .byte.b	#%00010100	;   # #
    556  f2a9		       7f		      .byte.b	#%01111111	; #######
    557  f2aa		       3e		      .byte.b	#%00111110	;  #####
    558  f2ab		       1c		      .byte.b	#%00011100	;   ###
    559  f2ac		       1c		      .byte.b	#%00011100	;   ###
    560  f2ad		       08		      .byte.b	#%00001000	;    #
    561  f2ae		       08		      .byte.b	#%00001000	;    #
    562  f2af		       08		      .byte.b	#%00001000	;    #
    563  f2b0
    564  f2b0				   JetSpriteTurn
    565  f2b0		       00		      .byte.b	#%00000000	;
    566  f2b1		       08		      .byte.b	#%00001000	;    #
    567  f2b2		       3e		      .byte.b	#%00111110	;  #####
    568  f2b3		       1c		      .byte.b	#%00011100	;   ###
    569  f2b4		       1c		      .byte.b	#%00011100	;   ###
    570  f2b5		       1c		      .byte.b	#%00011100	;   ###
    571  f2b6		       08		      .byte.b	#%00001000	;    #
    572  f2b7		       08		      .byte.b	#%00001000	;    #
    573  f2b8		       08		      .byte.b	#%00001000	;    #
    574  f2b9
    575  f2b9				   BomberSprite
    576  f2b9		       00		      .byte.b	#%00000000	;
    577  f2ba		       08		      .byte.b	#%00001000	;    #
    578  f2bb		       08		      .byte.b	#%00001000	;    #
    579  f2bc		       2a		      .byte.b	#%00101010	;  # # #
    580  f2bd		       3e		      .byte.b	#%00111110	;  #####
    581  f2be		       7f		      .byte.b	#%01111111	; #######
    582  f2bf		       2a		      .byte.b	#%00101010	;  # # #
    583  f2c0		       08		      .byte.b	#%00001000	;    #
    584  f2c1		       1c		      .byte.b	#%00011100	;   ###
    585  f2c2
    586  f2c2				   JetColor
    587  f2c2		       00		      .byte.b	#$00
    588  f2c3		       fe		      .byte.b	#$FE
    589  f2c4		       0c		      .byte.b	#$0C
    590  f2c5		       0e		      .byte.b	#$0E
    591  f2c6		       0e		      .byte.b	#$0E
    592  f2c7		       04		      .byte.b	#$04
    593  f2c8		       ba		      .byte.b	#$BA
    594  f2c9		       0e		      .byte.b	#$0E
    595  f2ca		       08		      .byte.b	#$08
    596  f2cb
    597  f2cb				   JetColorTurn
    598  f2cb		       00		      .byte.b	#$00
    599  f2cc		       fe		      .byte.b	#$FE
    600  f2cd		       0c		      .byte.b	#$0C
    601  f2ce		       0e		      .byte.b	#$0E
    602  f2cf		       0e		      .byte.b	#$0E
    603  f2d0		       04		      .byte.b	#$04
    604  f2d1		       0e		      .byte.b	#$0E
    605  f2d2		       0e		      .byte.b	#$0E
    606  f2d3		       08		      .byte.b	#$08
    607  f2d4
    608  f2d4				   BomberColor
    609  f2d4		       00		      .byte.b	#$00
    610  f2d5		       32		      .byte.b	#$32
    611  f2d6		       32		      .byte.b	#$32
    612  f2d7		       0e		      .byte.b	#$0E
    613  f2d8		       40		      .byte.b	#$40
    614  f2d9		       40		      .byte.b	#$40
    615  f2da		       40		      .byte.b	#$40
    616  f2db		       40		      .byte.b	#$40
    617  f2dc		       40		      .byte.b	#$40
    618  f2dd
    619  f2dd
    620  f2dd							;;;;;;;;;;;;;;;;;;
    621  f2dd							;;; Complete ROM size with exactly 4KB
    622  f2dd							;;;;;;;;;;;;;;;;;;
    623  fffc					      org	$FFFC	; move to position $FFFC
    624  fffc		       00 f0		      word.w	Reset	; write 2 bytes with the program reset address
    625  fffe		       00 f0		      word.w	Reset	; write 2 bytes with the interruption vector
